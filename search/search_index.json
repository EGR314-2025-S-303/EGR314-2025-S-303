{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Main Page","text":"<ul> <li>Team Number: 303  </li> <li>Team Members: Cade Clonts, Jahmel Garduno, Daniel Resnick</li> <li>Preparation Date:   January 1st, 2025</li> <li>Semester and Year: Spring 2025</li> <li>University: Arizona State University </li> <li>Class: EGR 314: Embedded Systems Design Project II</li> <li>Professor: Dr. Kevin Nichols, Dr. Daniel M. Aukes</li> </ul> <p>Welcome to the official project page for Team 303, where we are developing an interactive, web-enabled Weather Station. Our goal is to create an engaging STEM-based display that provides real-time environmental data while demonstrating key principles of embedded systems, automation, and human-machine interaction.</p> <p>Our design is structured into four core subsystems, each led by a team member:</p> <ul> <li>Communication (Cade Clonts) \u2013 Manages web communication using an ESP32.</li> <li>Sensor () \u2013 Collects environmental data using a PIC microcontroller.</li> <li>Actuator (Daniel Resnick) \u2013 Controls mechanical responses based on system inputs.</li> <li>Human-Machine Interface (Jahmel Garduno) \u2013 Ensures intuitive user interaction.</li> </ul> <p>We utilize UART communication between microcontrollers and SPI/I2C protocols for sensor-actuator coordination. By integrating modular design principles, we aim to develop a system that is both functional and scalable.</p> <p>Through this project, we strive to inspire curiosity in STEM by showcasing real-world applications of embedded systems and interactive technology. Stay tuned as we document our progress, challenges, and insights throughout the semester!</p> Name Link Team Website link Cade Clonts link Jahmel Garduno link Daniel Resnick link","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/","title":"Index","text":"","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#block-diagram","title":"Block Diagram","text":"<p>The team\u2019s block diagram outlines the flow of communication and functionality across different components in the system. Cade, utilizing an ESP32 microchip, serves as the central hub for bidirectional communication with the other team members, who use PIC microcontrollers. Data flows sequentially from Cade to Dan, who manages both sensor integration and actuator control, and then to Jahmel, responsible for the Human-Machine Interface (HMI), before looping back to Cade. The boards communicate via UART, ensuring reliable data transmission between each module. Additionally, the sensor and actuator exchange data through either SPI or I2C protocols, enabling efficient and precise control of the system\u2019s operation.</p> <p></p>","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#sequence-diagram","title":"Sequence Diagram","text":"<p>The sequence diagram illustrates the communication flow between users and system components, ensuring synchronized operation. When a Web User requests to turn on LED1, the command is passed sequentially from Cade to Dan, and then to Jahmel, who activates the LED and discards the processed message. Similarly, when an In-Person User sets the motor speed, the request travels from Jahmel to Cade, and then to Dan, who executes the command before discarding the message. Additionally, sensor data is transmitted in a continuous 1-second loop, where Dan sends data to Jahmel. Jahmel provides real-time feedback to the In-Person User while also relaying the data to Cade, who then updates the Web User before discarding the received data. This structured communication ensures efficient data flow and command execution throughout the system.</p> <pre><code>sequenceDiagram\n    actor Web User\n    Web User--&gt;&gt;+Cade: Turn on LED1\n    Cade-&gt;&gt;+Dan: Turn on LED1\n    Dan-&gt;&gt;+Jahmel: Turn on LED1\n    Jahmel-&gt;&gt;-Jahmel: LED1 ON, Trash Message\n    actor In Person User\n    In Person User--&gt;&gt;+Jahmel: Set Motor Speed\n    Jahmel-&gt;&gt;+Cade: Set Motor Speed\n    Web User--&gt;&gt;+Cade: Set Motor Speed\n    Cade-&gt;&gt;+Dan: Set Motor Speed\n    Dan-&gt;&gt;+Dan: Set Motor Speed Trash\n    loop Every 3 second\n    Cade-&gt;&gt;+Dan: Sensor Data\n    Cade--&gt;&gt;+Web User: Sensor Data\n    Dan-&gt;&gt;+Jahmel: Sensor Data\n    Jahmel--&gt;&gt;+In Person User: Sensor Data\n    Jahmel-&gt;&gt;+Cade: Sensor Data\n    Cade-&gt;&gt;-Cade: Sensor Data Trash\n    end</code></pre>","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#message-id","title":"Message ID","text":"<p>The Message ID table defines the unique identifiers for system members and their associated addresses. Each member is assigned a specific ID and address for communication within the system.</p> Member System ID Address Cade Clonts Wifi 1 0x01 Jahmel Human Interface 2 0x02 Dan Fan Control 3 0x03 Broadcast All 88 0x58","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#status","title":"Status","text":"<p>The Status table defines the status codes used in the system to indicate the state of a message or operation.</p> Status Code Normal 0x00 Error 0x01","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#message-types","title":"Message Types","text":"<p>The Message Types table categorizes the types of messages and their associated status or code ranges.</p> Category Status/Code Address Temp Data 0 to 255 0x10 Fan Control 0 to 3 0x20","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#temperature-sensor-message-type-1","title":"Temperature Sensor (Message Type 1)","text":"<p>The Temperature Sensor table defines the structure of messages for temperature data. Each byte in the message is mapped to a specific variable, with details about its type, range, and example values.</p> Byte Variable Name Variable Type Min Value Max Value Example Value 1 prefix_1 uint8_t 0x41 0x41 0x41 2 prefix_2 uint8_t 0x5a 0x5a 0x5a 3 source_id uint8_t 1 3 0x03 4 destination_id uint8_t 1 3 &amp; 88 0x58 5 message_type uint8_t 0x10 0x10 0x10 6 temp_id uint8_t 0 255 0x01 7 status uint8_t 0 1 0x01 8 temp_data_integer uint8_t 0 255 25 9 temp_data_fraction uint8_t 0 99 50 10-62 Unused uint8_t 0x00 0x00 0x00 63 suffix_1 uint8_t 0x59 0x59 0x59 64 suffix_2 uint8_t 0x42 0x42 0x42","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#fan-control-message-type-2","title":"Fan Control (Message Type 2)","text":"<p>The Fan Control table defines the structure of messages for controlling fan speed. Each byte in the message is mapped to a specific variable, with details about its type, range, and example values.</p> Byte Variable Name Variable Type Min Value Max Value Example Value 1 prefix_1 uint8_t 0x41 0x41 0x41 2 prefix_2 uint8_t 0x5a 0x5a 0x5a 3 source_id uint8_t 1 3 0x01 4 destination_id uint8_t 1 3 &amp; 88 0x04 5 message_type uint8_t 0x20 0x20 0x20 6 fan_id uint8_t 0 1 0x02 7 status uint8_t 0 1 0x01 8 fan_speed_data uint8_t 0 3 0x02 9 fan_speed_set uint8_t 0 3 0x01 10-62 Unused uint8_t 0x00 0x00 0x00 63 suffix_1 uint8_t 0x59 0x59 0x59 64 suffix_2 uint8_t 0x42 0x42 0x42","tags":["tag1"]},{"location":"Ideation%20and%20Concept%20Generation/","title":"Ideation and Concept Generation","text":""},{"location":"Ideation%20and%20Concept%20Generation/#goal-of-exhibit","title":"Goal of Exhibit","text":"<p>The goal of the exhibit is to create interactive, engaging, and educational experiences tailored to Kindergarten through 12th-grade students. Using interactive features, the exhibit aims to foster curiosity and active exploration by encouraging students to engage directly with scientific, cultural, or artistic concepts. By incorporating age-appropriate, hands-on activities, the exhibit seeks to make learning enjoyable and memorable while addressing key educational objectives such as understanding cause-and-effect relationships, correcting misconceptions, and sparking interest in the subject matter. The primary focus is on ensuring that students can interact with the exhibit in meaningful ways, promoting discovery and conceptual understanding through well-designed, intuitive, and durable interactive elements.</p>"},{"location":"Ideation%20and%20Concept%20Generation/#who-is-our-audience","title":"Who is our Audience?","text":"<p>The audience for the exhibit is Kindergarten through 12th-grade students, representing a wide range of developmental stages, interests, and learning styles. The exhibit is designed to cater to this diverse group by providing engaging, hands-on activities that are accessible and educational for younger children while still challenging and thought-provoking for older students. It considers the physical, cognitive, and social needs of the audience, ensuring the content is age-appropriate, visually appealing, and interactive. Additionally, the design emphasizes inclusivity, accommodating students with varying abilities and encouraging group interactions to reflect the collaborative nature of learning at this age. </p>"},{"location":"Ideation%20and%20Concept%20Generation/#generated-ideas","title":"Generated Ideas","text":""},{"location":"Ideation%20and%20Concept%20Generation/#sorted-and-ranked-ideas","title":"Sorted and Ranked Ideas","text":"Rank Quality 1 High 2 Medium 3 Low"},{"location":"Ideation%20and%20Concept%20Generation/#concept-sketch","title":"Concept Sketch","text":"<p>import pdf file here </p> <p>Our museum display that will highlight a STEM related topic will be a mock weather station. The main idea is to show how different environmental influences can affect weather data. We will create a see through box that will hold the environment where data is to be collected. We will have a door on one side to allow access to the environment. The sensors will be in the environment to collect data and transfer that information to an led screen for the museum user to access. This LED screen will also have access to a controller to adjust the environmental influence. Using this idea our team will be able to create an inclusive museum project with enough functionality to split between our team members. </p> <p>To ensure our project is inclusive we have multiple ideas we would like to implement to make our project easy to use. Some of these ideas are to have interchangeable environmental influences, speakers on LED devices, and simple controls. With our influences part of the excitement is experiencing the different types of weather. For example seeing a fog machine fill the environment and seeing the humidity and pressure change or feeling a heat lamp warm the environment and analyzing the data change. Having them be interchangeable will allow a wider range of people to fully experience our display. For example individuals with a vision impairment might not be able to see the fog machine but can feel the heat from a heat lamp. Another idea we had was to add speakers to the LED screen to allow for data to be read instead of having someone read it. This would have to be a very basic function as we are not sure how to implement this yet. Our last idea is to have easy to use controls for the user to access. These controls would only affect the environmental influence as the LED screen will have a set display shown. Our display will contain a basic written overview of the display. This overview will have background information for the display such as introductory weather information and how to use the display and access the data given.</p> <p>With all the functions of this display we will be able to split our project into four parts: the Sensor, actuator, Human Machine Interface(HMI), and Wifi connection. Our sensor will read the information of the environment and send that information to both our LED screen and controller. This Section will be led by Cade. Our actuator will be in control of the environmental influences by turning them on or off. This Section will be led by Dan. The HMI system will be an LED screen with a few buttons attached to it. The screen will display the weather data and the buttons will control a few preset modes of the environmental influence. This section will be led by Jahmel. Our final system will be the bidirectional internet communication. This will be a LED screen with a few buttons attached to it. The screen will display the weather data and the buttons will control a few preset modes of the environmental influence. This section will be led by Cade. </p>"},{"location":"Ideation%20and%20Concept%20Generation/#video-presentation","title":"Video Presentation","text":""},{"location":"Team%20Organization/","title":"Team Organization","text":""},{"location":"Team%20Organization/#team-charter-report","title":"Team Charter Report","text":"<p>Our team will work together to create a STEM-related interactive display. That display will be in the form of a web-enabled physical device. We will split our design into four subsystems \u2014 one for each team member to head. We will have one actuator, one sensor, one controller, and one HMI (human machine interface) subsystem. To complete this project the team will have meetings (dates and times to be determined) at least once a week. The team will finalize project decisions and familiarize each other with everyone's own subsystem. Decisions will be decided by a majority rule voting. In between meetings and classes our team will communicate through Discord.</p>"},{"location":"Team%20Organization/#mission-statement","title":"Mission Statement","text":"<p>Our mission is to inspire curiosity and excitement for STEM (Science, Technology, Engineering, and Math) through the development of innovative, interactive projects based on standards and modularity. This semester, we aim to design and construct a Weather Monitoring Station, web-enabled physical device that demonstrates the principles of automation, programming, and engineering. </p>"},{"location":"Team%20Organization/#summary-of-teams-decision-making","title":"Summary of Teams Decision making","text":"<p>By tailoring this project for Kindergarten through 12th-grade audiences, we decided we wanted to provide hands-on learning experiences that make complex scientific and engineering concepts accessible and relatable, through interactive demonstrations. Based on the criteria that students will explore critical STEM principles such as:</p> <ul> <li>Problem-solving: Understanding how sensors, coding, and mechanical design work together to solve a task.</li> <li>Technology integration: Gaining insights into how web-enabled systems can enhance physical devices.</li> <li>Practical application: Connecting STEM learning to real-world engineering and automation challenges.</li> </ul>"},{"location":"Team%20Organization/#team-goals","title":"Team Goals","text":"<ol> <li> <p>Develop a Market-Ready Product    Design a functional prototype suitable for future commercialization, ensuring it meets end-user needs and safety standards.  </p> </li> <li> <p>Enhance Technical Skills    Gain hands-on experience with embedded systems, circuit design, and other relevant technologies to demonstrate proficiency to potential employers.  </p> </li> <li> <p>Deliver a Portfolio-Worthy Project    Create detailed documentation and visuals to showcase the design process in resumes or professional profiles.  </p> </li> <li> <p>Collaborate Effectively    Strengthen team collaboration, communication, and conflict-resolution skills, reflecting real-world engineering environments.  </p> </li> <li> <p>Understand the Product Lifecycle    Explore all phases, from ideation to testing.</p> </li> </ol>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}