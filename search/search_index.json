{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Main Page","text":"<ul> <li>Team Number: 303  </li> <li>Team Members: Cade Clonts, Jahmel Garduno, Daniel Resnick</li> <li>Preparation Date:   January 1st, 2025</li> <li>Semester and Year: Spring 2025</li> <li>University: Arizona State University </li> <li>Class: EGR 314: Embedded Systems Design Project II</li> <li>Professor: Dr. Kevin Nichols, Dr. Daniel M. Aukes</li> </ul> <p>Welcome to the official project page for Team 303, where we are developing an interactive, web-enabled Cooling System. Our goal is to create an engaging STEM-based display that provides real-time environmental data while demonstrating key principles of embedded systems, automation, and human-machine interaction.</p> <p>Our design is structured into four core subsystems, each led by a team member:</p> <ul> <li>Communication (Cade Clonts) \u2013 Manages web communication using an ESP32.</li> <li>Sensor (Daughterboard) \u2013 Collects environmental data using own microcontroller.</li> <li>Actuator (Daniel Resnick) \u2013 Controls mechanical responses based on system inputs.</li> <li>Human-Machine Interface (Jahmel Garduno) \u2013 Ensures intuitive user interaction.</li> </ul> <p>We utilize UART communication between microcontrollers and SPI/I2C protocols for sensor-actuator coordination. By integrating modular design principles, we aim to develop a system that is both functional and scalable.</p> <p>Through this project, we strive to inspire curiosity in STEM by showcasing real-world applications of embedded systems and interactive technology. Stay tuned as we document our progress, challenges, and insights throughout the semester!</p> Name Link Team Website link Cade Clonts link Jahmel Garduno link Daniel Resnick link","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/","title":"Overview","text":"","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#block-diagram","title":"Block Diagram","text":"<p>The team\u2019s block diagram outlines the flow of communication and functionality across different components in the system. Cade, utilizing an ESP32 microchip, serves as the central hub for bidirectional communication with the other team members, who use PIC microcontrollers. Data flows sequentially from Cade to Dan, who manages both sensor integration and actuator control, and then to Jahmel, responsible for the Human-Machine Interface (HMI), before looping back to Cade. The boards communicate via UART, ensuring reliable data transmission between each module. Additionally, the sensor and actuator exchange data through either SPI or I2C protocols, enabling efficient and precise control of the system\u2019s operation.</p> <p></p>","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#block-diagram-structure-and-design-decisions","title":"Block Diagram Structure and Design Decisions","text":"<p>The block diagram was structured to clearly represent the final architecture of the system, reflecting the final team composition and clearly defined subsystem responsibilities: Fan Board (actuation), Wi-Fi Board (server communication), and HMI Board (user interface). Each module is connected via UART, while the Wi-Fi Board manages bidirectional communication with a server over Wi-Fi.</p> <p>The decision to use a modular structure was based on product requirements emphasizing real-time responsiveness, clear subsystem roles, and ease of debugging. Isolating functionality by board simplifies troubleshooting and allows parallel development among team members. All power and signal lines were documented to ensure traceability and consistency with the schematic.</p>","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#sequence-diagram","title":"Sequence Diagram","text":"<p>The sequence diagram illustrates the communication flow between users and system components, ensuring synchronized operation. When a Web User requests to turn on LED1, the command is passed sequentially from Cade to Dan, and then to Jahmel, who activates the LED and discards the processed message. Similarly, when an In-Person User sets the motor speed, the request travels from Jahmel to Cade, and then to Dan, who executes the command before discarding the message. Additionally, sensor data is transmitted in a continuous 1-second loop, where Dan sends data to Jahmel. Jahmel provides real-time feedback to the In-Person User while also relaying the data to Cade, who then updates the Web User before discarding the received data. This structured communication ensures efficient data flow and command execution throughout the system.</p> <pre><code>sequenceDiagram\n    actor Web User\n    Web User--&gt;&gt;+Cade: Turn on LED1\n    Cade-&gt;&gt;+Dan: Turn on LED1\n    Dan-&gt;&gt;+Jahmel: Turn on LED1\n    Jahmel-&gt;&gt;-Jahmel: LED1 ON, Trash Message\n    actor In Person User\n    In Person User--&gt;&gt;+Jahmel: Set1 Motor Speed\n    Jahmel-&gt;&gt;+Cade: Set Motor Speed\n    Web User--&gt;&gt;+Cade: Set Motor Speed\n    Cade-&gt;&gt;+Dan: Set Motor Speed\n    Dan-&gt;&gt;-Dan: Set Motor Speed Trash\n    Dan-&gt;&gt;+Jahmel: Motor Speed Set\n    Jahmel-&gt;&gt;+Cade: Motor Speed Set\n    Cade-&gt;&gt;+Dan: Motor Speed Set\n    Dan-&gt;&gt;-Dan: Motor Speed Set Trash\n    loop Every 3 second\n    Cade-&gt;&gt;+Dan: Sensor Data\n    Cade--&gt;&gt;+Web User: Sensor Data\n    Dan-&gt;&gt;+Jahmel: Sensor Data\n    Jahmel--&gt;&gt;+In Person User: Sensor Data\n    Jahmel-&gt;&gt;+Cade: Sensor Data\n    Cade-&gt;&gt;-Cade: Sensor Data Trash\n    end</code></pre>","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#functionality-of-communication-sequence-diagram","title":"Functionality of Communication Sequence Diagram","text":"<p>How the Diagram Meets Product Requirements The communication sequence diagram illustrates the data flow between users, system components, and subsystems, effectively meeting key product requirements for real-time data exchange, responsive control, and system feedback.</p> <p>User Interaction: The diagram begins with both Web User and In Person User actions, such as turning on an LED or setting the motor speed. This satisfies the product requirement for user control and remote monitoring via web and local interfaces.</p> <p>Message Propagation: Messages are passed through various system components (Cade, Dan, Jahmel), reflecting the distributed nature of the system. Each actor communicates with the next in line to trigger changes like turning on LEDs or setting motor speeds, fulfilling the need for inter-component communication.</p> <p>Data Synchronization: The diagram shows periodic sensor data updates every 3 seconds, aligning with the product requirement for continuous feedback from the system, ensuring that temperature and motor speed information is regularly sent to users and across the system.</p> <p>Trash Message Handling: The inclusion of \"trash\" messages indicates that some messages are discarded, reflecting a decision to filter out invalid or redundant data. This ensures message integrity and reduces unnecessary processing, maintaining system efficiency.</p>","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#design-decision-process","title":"Design Decision Process","text":"<p>The decision to structure the diagram with multiple actors and clear message flows was driven by the need to represent both user interaction and automated processes within the system. The team prioritized clarity in showing how user inputs translate into actions across different components, ensuring that the process is transparent and easy to follow.</p> <p>Multiple User Types: The inclusion of both a Web User and In Person User reflects different control interfaces, meeting the user needs for flexibility in managing the system remotely or locally.</p> <p>Modular Flow of Communication: The diagram breaks down the interaction into manageable steps, where each system actor (Cade, Dan, Jahmel) has a clear responsibility, emphasizing modular design and separation of concerns, which is key to simplifying debugging and testing.</p> <p>Sensor Data Loop: The loop at the end of the diagram ensures that sensor data is continually updated, fulfilling the requirement for real-time monitoring and enabling dynamic adjustments in fan speed and other system states.</p> <p>Trash Message Concept: The team consciously added the concept of \"trash\" messages, ensuring that the system discards unnecessary or erroneous messages. This design choice helps maintain the system\u2019s efficiency and responsiveness.</p>","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#message-id","title":"Message ID","text":"<p>The Message ID table defines the unique identifiers for system members and their associated addresses. Each member is assigned a specific ID and address for communication within the system.</p> Member System ID Address Cade Clonts Wifi 1 0x01 Jahmel Human Interface 2 0x02 Dan Fan Control 3 0x03 Broadcast All 88 0x58","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#status","title":"Status","text":"<p>The Status table defines the status codes used in the system to indicate the state of a message or operation.</p> Status Code Normal 0x00 Error 0x01","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#message-types","title":"Message Types","text":"<p>The Message Types table categorizes the types of messages and their associated status or code ranges.</p> Category Status/Code Address Temp Data 0 to 255 0x10 Fan Control 0 to 3 0x20","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#temperature-sensor-message-type-1","title":"Temperature Sensor (Message Type 1)","text":"<p>The Temperature Sensor table defines the structure of messages for temperature data. Each byte in the message is mapped to a specific variable, with details about its type, range, and example values.</p> Byte Variable Name Variable Type Min Value Max Value Example Value 1 prefix_1 uint8_t 0x41 0x41 0x41 2 prefix_2 uint8_t 0x5a 0x5a 0x5a 3 source_id uint8_t 1 3 0x03 4 destination_id uint8_t 1 3 &amp; 88 0x58 5 message_type uint8_t 0x10 0x10 0x10 6 temp_id uint8_t 0 255 0x01 7 status uint8_t 0 1 0x01 8 temp_data_integer uint8_t 0 255 25 9 temp_data_fraction uint8_t 0 99 50 10-62 Unused uint8_t 0x00 0x00 0x00 63 suffix_1 uint8_t 0x59 0x59 0x59 64 suffix_2 uint8_t 0x42 0x42 0x42","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#fan-control-message-type-2","title":"Fan Control (Message Type 2)","text":"<p>The Fan Control table defines the structure of messages for controlling fan speed. Each byte in the message is mapped to a specific variable, with details about its type, range, and example values.</p> Byte Variable Name Variable Type Min Value Max Value Example Value 1 prefix_1 uint8_t 0x41 0x41 0x41 2 prefix_2 uint8_t 0x5a 0x5a 0x5a 3 source_id uint8_t 1 3 0x01 4 destination_id uint8_t 1 3 &amp; 88 0x03 5 message_type uint8_t 0x20 0x20 0x20 6 fan_id uint8_t 0 1 0x01 7 status uint8_t 0 1 0x01 8 fan_speed_data uint8_t 0 3 0x02 9 fan_speed_set uint8_t 0 3 0x01 10-62 Unused uint8_t 0x00 0x00 0x00 63 suffix_1 uint8_t 0x59 0x59 0x59 64 suffix_2 uint8_t 0x42 0x42 0x42","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#message-type-matrix","title":"Message Type Matrix","text":"<ul> <li>S = Sending Message</li> <li>R = Recieving Message</li> </ul> Message Type Message ID CadeRole: MQTTID: 0x01 DanRole: MotorID: 0x03 JahmelRole: HMIID: 0x02 sensor value 0x10 S(Temperature Value in \u00b0C) R(motor turns on to cool system) R(Debug LEDs on/off within value ranges) Set Motor Speed 0x20 S(Publish 1, 2, or 3) R(Set 1 = Low, 2 = Medium, 3 = High) S(toggle debug button press 1, 2, 3) Motor Speed Status/Speed 0x20 R(Upload 1, 2, 3) S(Broadcast status/speed) R(Debug LED blinks to recognize message)","tags":["tag1"]},{"location":"Block%20Diagram%2C%20Process%20Diagram%2C%20and%20Message%20Structure/#top-5-biggest-changes-to-software-design","title":"Top 5 Biggest Changes to Software Design","text":"<ol> <li> <p>Rewriting UART Handling with Interrupts Initially, UART communication used polling, which blocked execution and caused missed messages. The design was changed to use interrupt-driven UART to allow asynchronous communication, improving reliability and responsiveness across all boards.</p> </li> <li> <p>Structured Message Parsing and Validation Early versions lacked clear message framing or validation, resulting in inconsistent parsing. A robust parsing routine was added using delimiters and checksums to ensure complete and correct message handling, reducing system errors.</p> </li> <li> <p>Fan Control Logic Centralized on Fan Board Originally, fan speed decisions were handled by the Temperature Board. This created unnecessary complexity. The logic was moved to the Fan Board to encapsulate control and simplify message flow, aligning better with modular design principles.</p> </li> <li> <p>Integration of a Message Buffer Queue Initially, each board processed incoming messages immediately upon receipt, which caused issues when multiple messages arrived in quick succession or during critical processing windows. To resolve this, a message buffer queue was implemented for each board, allowing messages to be queued and processed sequentially. This change significantly improved system stability under high message traffic, ensured no messages were lost, and enabled smoother multitasking across modules.</p> </li> <li> <p>Adjustment of Temperature Data Format for UART Compatibility Initially, temperature values ranged from -40\u00b0C to 155\u00b0C. However, using an uint8_t data type for UART transmission caused issues, as it couldn't represent negative values. To resolve this, the team remapped the range to 0\u2013255 by offsetting the raw temperature values (e.g., adding 40), allowing the full range to fit within a single byte. The decoding logic was then adjusted on the receiving end to subtract the offset and restore the correct temperature value. This ensured compatibility with the communication protocol without sacrificing accuracy.</p> </li> </ol>","tags":["tag1"]},{"location":"Ideation%20and%20Concept%20Generation/","title":"Ideation and Concept Generation","text":""},{"location":"Ideation%20and%20Concept%20Generation/#goal-of-exhibit","title":"Goal of Exhibit","text":"<p>The goal of the exhibit is to create interactive, engaging, and educational experiences tailored to Kindergarten through 12th-grade students. Using interactive features, the exhibit aims to foster curiosity and active exploration by encouraging students to engage directly with scientific, cultural, or artistic concepts. By incorporating age-appropriate, hands-on activities, the exhibit seeks to make learning enjoyable and memorable while addressing key educational objectives such as understanding cause-and-effect relationships, correcting misconceptions, and sparking interest in the subject matter. The primary focus is on ensuring that students can interact with the exhibit in meaningful ways, promoting discovery and conceptual understanding through well-designed, intuitive, and durable interactive elements.</p>"},{"location":"Ideation%20and%20Concept%20Generation/#who-is-our-audience","title":"Who is our Audience?","text":"<p>The audience for the exhibit is Kindergarten through 12th-grade students, representing a wide range of developmental stages, interests, and learning styles. The exhibit is designed to cater to this diverse group by providing engaging, hands-on activities that are accessible and educational for younger children while still challenging and thought-provoking for older students. It considers the physical, cognitive, and social needs of the audience, ensuring the content is age-appropriate, visually appealing, and interactive. Additionally, the design emphasizes inclusivity, accommodating students with varying abilities and encouraging group interactions to reflect the collaborative nature of learning at this age. </p>"},{"location":"Ideation%20and%20Concept%20Generation/#generated-ideas","title":"Generated Ideas","text":""},{"location":"Ideation%20and%20Concept%20Generation/#sorted-and-ranked-ideas","title":"Sorted and Ranked Ideas","text":"Rank Quality 1 High 2 Medium 3 Low"},{"location":"Ideation%20and%20Concept%20Generation/#concept-sketch","title":"Concept Sketch","text":"<p>import pdf file here </p> <p>Our display will highlight a STEM-related topic through a mock cooling station. The main idea is to show how different environmental conditions and design choices can affect temperature regulation and heat transfer. We will create an enclosure that represents the environment where cooling data is collected. Inside, sensor will monitor temperature and other relevant metrics, transferring this information to an LED screen for users to view. The LED screen will also be paired with controls that allow the user to adjust cooling. With this concept, our team will be able to create an inclusive, functional exhibit that divides responsibilities effectively among members.</p> <p>Our project will be divided into four key systems: Sensor, Actuator, Human-Machine Interface (HMI), and Wi-Fi Communication. The Sensor system will gather environmental data and relay it to both the LED screen and control unit. Cade will lead this section. The Actuator system will control the cooling elements, such as turning fans, and will be led by Dan. The HMI system will consist of an LED screen with a few control buttons. The screen will display temperature and cooling system data, while the buttons allow users to select preset cooling modes. Jahmel will lead this section. Finally, the Wi-Fi Communication system will manage bidirectional data transfer via the internet, allowing remote monitoring or control if desired. This section will also be led by Cade.</p>"},{"location":"Ideation%20and%20Concept%20Generation/#video-presentation","title":"Video Presentation","text":""},{"location":"Innovation%20Showcase%20Poster/","title":"Innovation Showcase Poster","text":"<ul> <li>Poster pdf</li> </ul>","tags":["tag1"]},{"location":"Reflection/","title":"Reflections","text":""},{"location":"Reflection/#top-10-things-learned-in-egr-314","title":"Top 10 Things Learned in EGR 314","text":"<p>Throughout the course of this project, our team learned several valuable lessons that extended far beyond just building hardware. One of the most important lessons was understanding how to use datasheets effectively\u2014not just for verifying pinouts or voltage ranges, but also for identifying what circuits or configurations work best with a given component. This included selecting supporting components that complement our microcontroller and voltage regulator, ensuring both electrical and functional compatibility.</p> <p>We also learned how structured communication protocols should be designed, particularly when constrained to 8-bit compilers and fixed-size message formats such as the 64-byte UART protocol we used. This experience gave us a deeper appreciation for the challenges and nuances of embedded communication. Related to this, we learned how to properly implement pull-up and pull-down resistors to ensure predictable digital behavior in input circuits.</p> <p>As we moved deeper into design implementation, we became more proficient at extracting the exact information we needed from datasheets\u2014such as electrical characteristics, timing diagrams, and setup conditions\u2014and using that data to properly configure our components in code and hardware. Our coding skills grew significantly, not just in embedded C for microcontroller programming, but also in Python for testing and simulation purposes. Along the way, we gained experience in debugging using both software tools like breakpoints and hardware tools like oscilloscopes, which allowed us to verify functionality and troubleshoot difficult issues.</p> <p>One major takeaway was the importance of clear communication within the team. It became essential to align our interpretation of assignment goals with our individual subsystem responsibilities, especially as integration deadlines approached. Time management also proved critical\u2014we learned to use the lead time before checkoffs not just for implementation, but for researching unfamiliar concepts, refining our approach, and asking targeted questions.</p> <p>Finally, one of the most practical lessons we learned was how to adapt on the fly. When things didn\u2019t go as planned\u2014whether due to a short circuit, a failed board, or unexpected behavior\u2014we learned how to quickly troubleshoot, reroute connections, and implement fixes under pressure. This flexibility and fast problem-solving mindset proved just as important as our technical skills in meeting deadlines and achieving a successful final demonstration.</p>"},{"location":"Reflection/#top-5-recommendations-for-future-students","title":"Top 5 Recommendations for Future Students","text":"<ol> <li> <p>Start Early and Stay Organized    Work ahead on assignments and meet with your teammates regularly. The course timeline is fast-paced, and deadlines can pile up quickly if you fall behind.</p> </li> <li> <p>Complete All the Labs    The lab exercises build foundational skills that become essential when working on your individual subsystem and during team integration. Don't skip them\u2014they directly support your success in the final project.</p> </li> <li> <p>Master Datasheets and Leverage Tools    Learn how to properly read and interpret component datasheets. When you're unsure, use tools like AI or forums to gain clarity on specifications, pinouts, or recommended usage.</p> </li> <li> <p>Practice Soldering Surface-Mount Components    Many of the components used in this course are SMDs (Surface-Mount Devices). Practicing your soldering skills early will make hardware assembly much smoother and less stressful.</p> </li> <li> <p>Take Advantage of Office Hours    Use office hours to ask questions and get help. Whether you're stuck on debugging, need clarification on a concept, or want feedback on your design, these sessions are a valuable resource.</p> </li> </ol>"},{"location":"Reflection/#version-20-communication-architecture-and-project-direction-improvements","title":"Version 2.0: Communication Architecture and Project Direction Improvements","text":"<p>If we were to develop a Version 2.0 of our communication architecture, one of the first improvements would be setting a clearer foundation for the overall project direction. Early in the design process, our concept\u2014focused on a heat-controlled cooling station\u2014met the course requirements but lacked the kind of interactivity and engagement that might have made the system more dynamic and fun. In hindsight, selecting a more centralized and interactive concept would have motivated a more cohesive design and made demonstrations more compelling. For example, instead of simply toggling fan speeds based on temperature, a Version 2.0 project might involve user-controlled challenges, visual feedback, or gamified input\u2014providing a better platform to showcase our technical work and creativity.</p> <p>From a team dynamics perspective, we would also improve how we align subsystem roles with individual skills. A more intentional conversation early in the semester about each member\u2019s strengths in C, Python, or debugging tools could have made a significant impact on productivity. This would have allowed us to assign team members to microcontroller platforms that best matched their experience. For instance, members comfortable with Python could take on ESP32-based subsystems, while those familiar with MPLAB and C could handle tasks like sensor interfacing on PIC.</p> <p>One of the biggest architectural shifts would be to move most subsystems\u2014especially the HMI and display module\u2014to the ESP32 using MicroPython. Python\u2019s terminal-based interface allows for easy debugging, print statements, and dynamic testing, which dramatically improves development speed and reliability. In contrast, MPLAB for PIC offers limited real-time feedback, making it harder to identify and resolve issues. This shift would make the system more developer-friendly and reduce time spent troubleshooting UART messages, peripheral registers, or mismatched settings.</p> <p>That said, the PIC microcontroller still offers benefits in dedicated, one-way communication roles. For instance, the temperature sensor subsystem only needs to measure data and broadcast it at fixed intervals. By keeping this task isolated to the PIC using minimal C code, we reduce complexity and ensure reliable performance. In this configuration, the PIC would serve strictly as a transmit-only node, simplifying its firmware by removing the need to parse or respond to incoming messages.</p> <p>On the protocol side, Version 2.0 would improve message structure by including checksums or message counters to validate data integrity, detect dropped messages, and improve synchronization. Additionally, we would modularize our codebase, separating low-level hardware interfaces, message parsing, and application logic into clean, reusable components. Most of this could be shared across Python-based subsystems, reducing duplication and improving team collaboration.</p> <p>To further enhance reliability and system-level feedback, we\u2019d implement heartbeat/status pings, watchdog timers, and perhaps an error-reporting protocol so subsystems could identify and respond to faults more effectively. These changes would help create a more robust, fault-tolerant system architecture.</p> <p>In summary, Version 2.0 of our project would benefit from a better conceptual foundation, a more engaging project focus, smarter alignment of team skills, and a platform strategy built around the ESP32 for flexibility and debuggability. Coupled with refined message protocols, modular code, and added reliability features, this version would be more functional, easier to develop, and more impressive to demonstrate.</p>"},{"location":"Resources/","title":"Resources","text":""},{"location":"Resources/#innovation-showcase","title":"Innovation Showcase","text":""},{"location":"Resources/#cade-wifi-board-step-files","title":"Cade (Wifi Board) Step Files","text":"<ul> <li>ZIP files</li> </ul>"},{"location":"Team%20Organization/","title":"Team Organization","text":""},{"location":"Team%20Organization/#team-charter-report","title":"Team Charter Report","text":"<p>Our team will work together to create a STEM-related interactive display. That display will be in the form of a web-enabled physical device. We will split our design into four subsystems \u2014 one for each team member to head. We will have one actuator, one sensor, one controller, and one HMI (human machine interface) subsystem. To complete this project the team will have meetings (dates and times to be determined) at least once a week. The team will finalize project decisions and familiarize each other with everyone's own subsystem. Decisions will be decided by a majority rule voting. In between meetings and classes our team will communicate through Discord.</p>"},{"location":"Team%20Organization/#mission-statement","title":"Mission Statement","text":"<p>Our mission is to inspire curiosity and excitement for STEM (Science, Technology, Engineering, and Math) through the development of innovative, interactive projects based on standards and modularity. This semester, we aim to design and construct a Cooling Station, web-enabled physical device that demonstrates the principles of automation, programming, and engineering. </p>"},{"location":"Team%20Organization/#summary-of-teams-decision-making","title":"Summary of Teams Decision making","text":"<p>By tailoring this project for Kindergarten through 12th-grade audiences, we decided we wanted to provide hands-on learning experiences that make complex scientific and engineering concepts accessible and relatable, through interactive demonstrations. Based on the criteria that students will explore critical STEM principles such as:</p> <ul> <li>Problem-solving: Understanding how sensors, coding, and mechanical design work together to solve a task.</li> <li>Technology integration: Gaining insights into how web-enabled systems can enhance physical devices.</li> <li>Practical application: Connecting STEM learning to real-world engineering and automation challenges.</li> </ul>"},{"location":"Team%20Organization/#team-goals","title":"Team Goals","text":"<ol> <li> <p>Develop a Market-Ready Product    Design a functional prototype suitable for future commercialization, ensuring it meets end-user needs and safety standards.  </p> </li> <li> <p>Enhance Technical Skills    Gain hands-on experience with embedded systems, circuit design, and other relevant technologies to demonstrate proficiency to potential employers.  </p> </li> <li> <p>Deliver a Portfolio-Worthy Project    Create detailed documentation and visuals to showcase the design process in resumes or professional profiles.  </p> </li> <li> <p>Collaborate Effectively    Strengthen team collaboration, communication, and conflict-resolution skills, reflecting real-world engineering environments.  </p> </li> <li> <p>Understand the Product Lifecycle    Explore all phases, from ideation to testing.</p> </li> </ol>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}